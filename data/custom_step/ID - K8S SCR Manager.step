{"creationTimeStamp":"2025-08-18T15:27:04.180Z","modifiedTimeStamp":"2025-09-02T13:16:51.164Z","createdBy":"viyademo01","modifiedBy":"viyademo01","name":"ID - K8S SCR Manager.step","displayName":"ID - K8S SCR Manager.step","localDisplayName":"ID - K8S SCR Manager.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","uri":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","uri":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","uri":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","uri":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc"},{"method":"POST","rel":"copy","href":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc/copy","uri":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc/copy","responseType":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","uri":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","uri":"/dataFlows/steps/d09cee17-bcc7-4254-a6b8-3d9efdf9b1bc","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Settings\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_mudus_section\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Modus\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_modus\",\n\t\t\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Pull image\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Restart pod\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Delete deployment\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Get list of pods in namespace\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Get log\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Get MAS log\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_pull_image_section\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Pull image from container registry\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$_modus\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"Pull image\"\n\t\t\t\t\t],\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_scr_name\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Container Image Name\",\n\t\t\t\t\t\t\t\"placeholder\": \"Docker image name\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_scr_tag\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Container Image Tag\",\n\t\t\t\t\t\t\t\"placeholder\": \"Image tag\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_app_owner\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Owner\",\n\t\t\t\t\t\t\t\"placeholder\": \"Image owner contact name\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_imagePull\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"Image Pull Policy\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Always\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"IfNotPresent\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Never\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_db_secret\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"SCR is using database\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_num_env_vars\",\n\t\t\t\t\t\t\t\"type\": \"numstepper\",\n\t\t\t\t\t\t\t\"label\": \"Environment Variables\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"integer\": true,\n\t\t\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\t\t\"max\": 5,\n\t\t\t\t\t\t\t\"stepsize\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_env_var_01\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Environment Variable 1\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$_num_env_vars\",\n\t\t\t\t\t\t\t\t\">\",\n\t\t\t\t\t\t\t\t0\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_name_01\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Name\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_value_01\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_env_var_02\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Environment Variable 2\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$_num_env_vars\",\n\t\t\t\t\t\t\t\t\">\",\n\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_name_02\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Name\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_value_02\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_env_var_03\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Environment Variable 3\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$_num_env_vars\",\n\t\t\t\t\t\t\t\t\">\",\n\t\t\t\t\t\t\t\t2\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_name_03\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Name\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_value_03\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_env_var_04\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Environment Variable 4\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$_num_env_vars\",\n\t\t\t\t\t\t\t\t\">\",\n\t\t\t\t\t\t\t\t3\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_name_04\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Name\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_value_04\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_env_var_05\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Environment Variable 5\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$_num_env_vars\",\n\t\t\t\t\t\t\t\t\">\",\n\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_name_05\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Name\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"_value_05\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\t\t\"indent\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_restart_section\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Restart pod\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$_modus\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"Restart pod\"\n\t\t\t\t\t],\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_deployment_name_restart\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Deployment name\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_delete_section\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Delete deployment\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$_modus\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"Delete deployment\"\n\t\t\t\t\t],\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_deployment_name_delete\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Deployment name\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_get_list_section\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Get list of pods in namespace\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$_modus\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"Get list of pods in namespace\"\n\t\t\t\t\t],\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Run the step to receive a list of all pods running in the dedicated namespace in Kubernetes with status and age imformation.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_get_log\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Get log\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$_modus\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"Get log\"\n\t\t\t\t\t],\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_pod_name\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Pod name\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_showrows_rb\",\n\t\t\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\t\t\"label\": \"Show rows in log\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"All rows\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Top rows\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Bottom rows\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"indent\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_showrows\",\n\t\t\t\t\t\t\t\"type\": \"numstepper\",\n\t\t\t\t\t\t\t\"label\": \"Number of rows\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"integer\": false,\n\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"stepsize\": 1,\n\t\t\t\t\t\t\t\"indent\": 2,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_showrows_rb\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"Top rows\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_showrows_rb\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"Bottom rows\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_get_log_mas\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Get MAS log\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$_modus\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"Get MAS log\"\n\t\t\t\t\t],\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_showrows_rb_mas\",\n\t\t\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\t\t\"label\": \"Show rows in log\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"All rows\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Top rows\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Bottom rows\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"indent\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_showrows_mas\",\n\t\t\t\t\t\t\t\"type\": \"numstepper\",\n\t\t\t\t\t\t\t\"label\": \"Number of rows\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"integer\": false,\n\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"stepsize\": 1,\n\t\t\t\t\t\t\t\"indent\": 2,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_showrows_rb_mas\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"Top rows\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_showrows_rb_mas\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"Bottom rows\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Options\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"The service URL to call the K8S SCR Manager Service container\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_service_url\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Service URL\",\n\t\t\t\t\t\"placeholder\": \"Use internal DNS: <pod-name>.<namespace>.svc.cluster.local\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"_modus\": {\n\t\t\t\"value\": \"Pull image\"\n\t\t},\n\t\t\"_scr_tag\": \"latest\",\n\t\t\"_imagePull\": {\n\t\t\t\"value\": \"Always\"\n\t\t},\n\t\t\"_db_secret\": true,\n\t\t\"_num_env_vars\": 0,\n\t\t\"_deployment_name_restart\": \"\",\n\t\t\"_deployment_name_delete\": \"\",\n\t\t\"_pod_name\": \"\",\n\t\t\"_showrows_rb\": {\n\t\t\t\"value\": \"All rows\"\n\t\t},\n\t\t\"_showrows\": 10,\n\t\t\"_showrows_rb_mas\": {\n\t\t\t\"value\": \"Bottom rows\"\n\t\t},\n\t\t\"_showrows_mas\": 30,\n\t\t\"_service_url\": \"k8s-scr-mgr.default.svc.cluster.local\"\n\t}\n}","templates":{"SAS":"/***************************************************************************\n* Custom Step: ID - K8S SCR Manager\n* --------------------------------------------------------------------------\n* The K8S SCR Manager node will:\n* - pull a SCR image into Kubernetes\n* - restart a pod running a SCR container\n* - delete a SCR deployment\n* - list all pods in the accosiated namespace\n* - get a SCR log \n* - get the MAS log \n* --------------------------------------------------------------------------\n* Note: Macros starting with an underscore contain UI variable values\n***************************************************************************/\n%let SERVICE_POINT=k8s-scr-adm;\n\n/***************************************************************************/\n/* Macro pullscr()                                                         */ \n/* ----------------------------------------------------------------------- */\n/* The macro will generate generate the k8s YAML file and apply it to k8s  */\n/***************************************************************************/\n%macro pullscr();\n\tfilename py temp;\n\tdata _null_;\n\t    file py;\n\t\tput 'import requests';\n\t\tput ' ';\n\t\tput 'SCR_NAME= SAS.symget(''_scr_name'').strip()';\n\t\tput 'SCR_TAG= SAS.symget(''_scr_tag'').strip()';\n\t\tput 'APP_OWNER= SAS.symget(''_app_owner'').strip()';\n\t\tput 'SERVICE_URL= SAS.symget(''_service_url'').strip()';\n\t\tput 'SERVICE_POINT= SAS.symget(''service_point'').strip()';\n\t\tput 'IMAGE_PULL_POLICY= SAS.symget(''_imagePull'').strip()';\n\t\tput 'DB_SECRET= int(SAS.symget(''_db_secret''))';\n\t\tput 'ENV_VARS= []';\n\t\tput 'name= SAS.symget(''_name_01'').strip()';\n\t\tput 'value= SAS.symget(''_value_01'').strip()';\n\t\tput 'if len(name) > 0:';\n\t\tput '    env= {name:value}';\n\t\tput '    ENV_VARS.append(env)';\n\t\tput 'name= SAS.symget(''_name_02'').strip()';\n\t\tput 'value= SAS.symget(''_value_02'').strip()';\n\t\tput 'if len(name) > 0:';\n\t\tput '    env= {name:value}';\n\t\tput '    ENV_VARS.append(env)';\n\t\tput 'name= SAS.symget(''_name_03'').strip()';\n\t\tput 'value= SAS.symget(''_value_03'').strip()';\n\t\tput 'if len(name) > 0:';\n\t\tput '    env= {name:value}';\n\t\tput '    ENV_VARS.append(env)';\n\t\tput 'name= SAS.symget(''_name_04'').strip()';\n\t\tput 'value= SAS.symget(''_value_04'').strip()';\n\t\tput 'if len(name) > 0:';\n\t\tput '    env= {name:value}';\n\t\tput '    ENV_VARS.append(env)';\n\t\tput 'name= SAS.symget(''_name_05'').strip()';\n\t\tput 'value= SAS.symget(''_value_05'').strip()';\n\t\tput 'if len(name) > 0:';\n\t\tput '    env= {name:value}';\n\t\tput '    ENV_VARS.append(env)';\n\t\tput ' ';\n\t\tput '# Define the URL of the REST API';\n\t\tput 'url= f''http://{SERVICE_URL}/{SERVICE_POINT}/pull-scr''';\n\t\tput '# Define the JSON payload to send';\n\t\tput 'payload = {';\n\t\tput '\t''scr_name'': SCR_NAME,';\n\t\tput '\t''scr_tag'': SCR_TAG,';\n\t\tput '   ''app_owner'': APP_OWNER,';\n\t\tput '\t''image_pull_policy'': IMAGE_PULL_POLICY,';\n\t\tput '   ''db_secret'': DB_SECRET,';\n\t\tput '\t''env_vars'': ENV_VARS';\n\t\tput '}';\n\t\tput ' ';\n\t\tput '# Send the POST request';\n\t\tput 'response= requests.post(url, json=payload, verify=False)';\n\t\tput ' ';\n\t\tput 'url= \"\"';\n\t\tput 'if response.status_code > 200 and response.status_code < 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 200:';\n\t\tput '\tmsg= response.json()[''message'']';\n\t\tput '\turl= response.json()[''url'']';\n\t\tput ' ';\n\t\tput 'i= 1';\n\t\tput 'msg= msg.replace('' - '', ''\\n'')';\n\t\tput 'for line in msg.split(''\\n''):';\n\t\tput '    if line:';\n\t\tput '        line= line.replace(''Error:'', ''ERROR:'')';\n\t\tput '        line= line.replace('' '', '' @'')';\n\t\tput '        line= line.replace('':'', '':@'')';\n\t\tput '        buffer= ''''';\n\t\tput '        for w in line.split(''@''):';\n\t\tput '            if len(buffer + w) <= 80:';\n\t\tput '                buffer+= w';\n\t\tput '            else:';\n\t\tput '                SAS.symput(f''msg{i}'', buffer)';\n\t\tput '                i+= 1';\n\t\tput '                buffer= f''    {w}''';\n\t\tput '        SAS.symput(f''msg{i}'', buffer)';\n\t\tput '        i+= 1';\n\t\tput 'SAS.symput(f''msgcnt'', i-1)';\n\t\tput 'SAS.symput(f''url'', url)';\n\trun;\n\t\n\tproc python infile= py;\n\trun;\n\n    /* output result */\t\n\tdata _null_;\n\t    file print; \n\t\tput 'Result:';\n\t    %let i=0;\n\t    %do %while(&i < &MSGCNT);\n\t      %let i = %eval(&i+1);\n\t\t\tput \"%BQUOTE(&&MSG&i)\";\n\t\t%end;\n\t\tput '-----';\n\t\tput \"SCR URL= %BQUOTE(&URL)\";\n\t\tcall symput('msg', '');\n\t\tcall symput('url', '');\n\trun;\n%mend pullscr;\n\n/***************************************************************************/\n/* Macro restartscr()                                                       */ \n/* ----------------------------------------------------------------------- */\n/* The macro deletes the deployment, service and ingress for the SCR image */\n/***************************************************************************/\n%macro restartscr();\n\tfilename py temp;\n\tdata _null_;\n\t    file py;\n\t\tput 'import requests';\n\t\tput ' ';\n\t\tput 'SCR_DEPLOYMENT= SAS.symget(''_deployment_name_restart'').strip()';\n\t\tput 'SERVICE_URL= SAS.symget(''_service_url'').strip()';\n\t\tput 'SERVICE_POINT= SAS.symget(''service_point'').strip()';\n\t\tput ' ';\n\t\tput '# Define the URL of the REST API';\n\t\tput 'url= f''http://{SERVICE_URL}/{SERVICE_POINT}/restart-scr''';\n\t\tput '# Define the JSON payload to send';\n\t\tput 'payload = {';\n\t\tput '\t''deployment_name'': SCR_DEPLOYMENT';\n\t\tput '}';\n\t\tput ' ';\n\t\tput '# Send the POST request';\n\t\tput 'response= requests.post(url, json=payload, verify=False)';\n\t\tput ' ';\n\t\tput 'url= \"\"';\n\t\tput 'if response.status_code > 200 and response.status_code < 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 200:';\n\t\tput '\tmsg= response.json()[''message'']';\n\t\tput '\turl= response.json()[''url'']';\n\t\tput ' ';\n\t\tput 'i= 1';\n\t\tput 'msg= msg.replace('' - '', ''\\n'')';\n\t\tput 'for line in msg.split(''\\n''):';\n\t\tput '    if line:';\n\t\tput '        line= line.replace(''Error:'', ''ERROR:'')';\n\t\tput '        line= line.replace('' '', '' @'')';\n\t\tput '        line= line.replace('':'', '':@'')';\n\t\tput '        buffer= ''''';\n\t\tput '        for w in line.split(''@''):';\n\t\tput '            if len(buffer + w) <= 80:';\n\t\tput '                buffer+= w';\n\t\tput '            else:';\n\t\tput '                SAS.symput(f''msg{i}'', buffer)';\n\t\tput '                i+= 1';\n\t\tput '                buffer= f''    {w}''';\n\t\tput '        SAS.symput(f''msg{i}'', buffer)';\n\t\tput '        i+= 1';\n\t\tput 'SAS.symput(f''msgcnt'', i-1)';\n\t\tput 'SAS.symput(f''url'', url)';\n\trun;\n\t\n\tproc python infile= py;\n\trun;\n\n    /* output result */\t\n\tdata _null_;\n\t    file print; \n\t\tput 'Result:';\n\t    %let i=0;\n\t    %do %while(&i < &MSGCNT);\n\t      %let i = %eval(&i+1);\n\t\t\tput \"%BQUOTE(&&MSG&i)\";\n\t\t%end;\n\t\tput '-----';\n\t\tput \"SCR URL= %BQUOTE(&URL)\";\n\t\tcall symput('msg', '');\n\t\tcall symput('url', '');\n\trun;\n%mend restartscr;\n\n/***************************************************************************/\n/* Macro deletescr()                                                       */ \n/* ----------------------------------------------------------------------- */\n/* The macro deletes the deployment, service and ingress for the SCR image */\n/***************************************************************************/\n%macro deletescr();\n\tfilename py temp;\n\tdata _null_;\n\t    file py;\n\t\tput 'import requests';\n\t\tput ' ';\n\t\tput 'SCR_DEPLOYMENT= SAS.symget(''_deployment_name_delete'').strip()';\n\t\tput 'SERVICE_URL= SAS.symget(''_service_url'').strip()';\n\t\tput 'SERVICE_POINT= SAS.symget(''service_point'').strip()';\n\t\tput ' ';\n\t\tput '# Define the URL of the REST API';\n\t\tput 'url= f''http://{SERVICE_URL}/{SERVICE_POINT}/delete-scr''';\n\t\tput '# Define the JSON payload to send';\n\t\tput 'payload = {';\n\t\tput '\t''deployment_name'': SCR_DEPLOYMENT';\n\t\tput '}';\n\t\tput ' ';\n\t\tput '# Send the POST request';\n\t\tput 'response= requests.post(url, json=payload, verify=False)';\n\t\tput ' ';\n\t\tput 'if response.status_code > 200 and response.status_code < 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 200:';\n\t\tput '\tmsg= response.json()[''message'']';\n\t\tput ' ';\n\t\tput 'i= 1';\n\t\tput 'msg= msg.replace('' - '', ''\\n'')';\n\t\tput 'for line in msg.split(''\\n''):';\n\t\tput '    if line:';\n\t\tput '        line= line.replace(''Error:'', ''ERROR:'')';\n\t\tput '        line= line.replace('' '', '' @'')';\n\t\tput '        line= line.replace('':'', '':@'')';\n\t\tput '        buffer= ''''';\n\t\tput '        for w in line.split(''@''):';\n\t\tput '            if len(buffer + w) <= 80:';\n\t\tput '                buffer+= w';\n\t\tput '            else:';\n\t\tput '                SAS.symput(f''msg{i}'', buffer)';\n\t\tput '                i+= 1';\n\t\tput '                buffer= f''    {w}''';\n\t\tput '        SAS.symput(f''msg{i}'', buffer)';\n\t\tput '        i+= 1';\n\t\tput 'SAS.symput(f''msgcnt'', i-1)';\n\trun;\n\t\n\tproc python infile= py;\n\trun;\n\n    /* output result */\t\n\tdata _null_;\n\t    file print; \n\t\tput 'Result:';\n\t    %let i=0;\n\t    %do %while(&i < &MSGCNT);\n\t      %let i = %eval(&i+1);\n\t\t\tput \"%BQUOTE(&&MSG&i)\";\n\t\t%end;\n\t\tcall symput('msg', '');\n\trun;\n%mend deletescr;\n\n/***************************************************************************/\n/* Macro listscr()                                                         */ \n/* ----------------------------------------------------------------------- */\n/* The macro will list all pods in the accosiated namespace in k8s         */\n/***************************************************************************/\n%macro listscr();\n\tfilename py temp;\n\tdata _null_;\n\t    file py;\n\t\tput 'import requests';\n\t\tput 'import pandas as pd';\n\t\tput ' ';\n\t\tput 'SERVICE_URL= SAS.symget(''_service_url'').strip()';\n\t\tput 'SERVICE_POINT= SAS.symget(''service_point'').strip()';\n\t\tput ' ';\n\t\tput '# Define the URL of the REST API';\n\t\tput 'url= f''http://{SERVICE_URL}/{SERVICE_POINT}/list-scr''';\n\t\tput ' ';\n\t\tput '# Send the GET request';\n\t\tput 'response= requests.get(url, verify=False, timeout=10)';\n\t\tput ' ';\n        put 'SAS.symput(''msg'', '''')';\n\t\tput 'if response.status_code > 200 and response.status_code < 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 200:';\n\t\tput '    # First row is the header';\n\t\tput '    df= pd.DataFrame(response.json()[''list''][1:], columns=response.json()[''list''][0])';\n\t\tput '    ns= response.json()[''ns'']';\n\t\tput '    ns= ns.replace(''-'',''_'')';\n\t\tput '    SAS.df2sd(df, f''work.ns_{ns[:25]}_lst'')';\n\trun;\n\t\n\tproc python infile= py;\n\trun;\n\n    /* output result */\t\n\tdata _null_;\n\t    file print; \n\t\t%if %length(&MSG) > 0 %then %do;\n\t\t\tput \"%BQUOTE(&MSG)\";\n\t\t%end;\n\t\tcall symput('msg', '');\n\trun;\n%mend listscr;\n\n/***************************************************************************/\n/* Macro getlogscr()                                                       */ \n/* ----------------------------------------------------------------------- */\n/* The macro will gets the log for a pod                                   */\n/***************************************************************************/\n%macro getlogscr();\n\tfilename py temp;\n\tdata _null_;\n\t    file py;\n\t\tput 'import requests';\n\t\tput 'import pandas as pd';\n\t\tput ' ';\n\t\tput 'POD_NAME= SAS.symget(''_pod_name'').strip()';\n\t\tput 'SHOW_ROWS= SAS.symget(''_showrows_rb'').strip()';\n\t\tput 'NUM_ROWS= int(SAS.symget(''_showrows'').strip())';\n\t\tput 'SERVICE_URL= SAS.symget(''_service_url'').strip()';\n\t\tput 'SERVICE_POINT= SAS.symget(''service_point'').strip()';\n\t\tput ' ';\n\t\tput 'if SHOW_ROWS == ''All rows'':';\n\t\tput '    SHOW_ROWS= ''ALL''';\n\t\tput 'if SHOW_ROWS == ''Top rows'':';\n\t\tput '    SHOW_ROWS= ''TOP''';\n\t\tput 'if SHOW_ROWS == ''Bottom rows'':';\n\t\tput '    SHOW_ROWS= ''BOTTOM''';\n\t\tput ' ';\n\t\tput '# Define the URL of the REST API';\n\t\tput 'url= f''http://{SERVICE_URL}/{SERVICE_POINT}/getlog-scr''';\n\t\tput '# Define the JSON payload to send';\n\t\tput 'payload = {';\n\t\tput '\t''pod_name'': POD_NAME,';\n\t\tput '    ''show_rows'': SHOW_ROWS,';\n\t\tput '    ''num_rows'': NUM_ROWS';\n\t\tput '}';\n\t\tput ' ';\n\t\tput '# Send the POST request';\n\t\tput 'response= requests.post(url, json=payload, verify=False)';\n\t\tput ' ';\n\t\tput 'msg= \"\"';\n\t\tput 'SAS.symput(''msg'', msg)';\n\t\tput 'if response.status_code > 200 and response.status_code < 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 200:';\n\t\tput '    # First row is the header';\n\t\tput '    df= pd.DataFrame(response.json()[''log''][1:], columns=[response.json()[''log''][0]])';\n\t\tput '    ns= response.json()[''ns'']';\n\t\tput '    pod= response.json()[''pod_name'']';\n\t\tput '    pod= pod.replace(''-'', ''_'')';\n\t\tput '    SAS.df2sd(df, f''work.{pod[:32]}'')';\n\t\tput 'SAS.symput(''msg'', msg)';\n\trun;\n\t\n\tproc python infile= py;\n\trun;\n\n    /* output result */\t\n\tdata _null_;\n\t    file print; \n\t\t%if %length(&MSG) > 0 %then %do;\n\t\t\tput \"%BQUOTE(&MSG)\";\nput \"sasasas\";\n\t\t%end;\n\t\tcall symput('msg', '');\n\trun;\n%mend getlogscr;\n\n/***************************************************************************/\n/* Macro getlogscr()                                                       */ \n/* ----------------------------------------------------------------------- */\n/* The macro will gets the log for MAS                                   */\n/***************************************************************************/\n%macro getlogmas();\n\tfilename py temp;\n\tdata _null_;\n\t    file py;\n\t\tput 'import requests';\n\t\tput 'import pandas as pd';\n\t\tput ' ';\n\t\tput 'SHOW_ROWS= SAS.symget(''_showrows_rb_mas'').strip()';\n\t\tput 'NUM_ROWS= int(SAS.symget(''_showrows_mas'').strip())';\n\t\tput 'SERVICE_URL= SAS.symget(''_service_url'').strip()';\n\t\tput 'SERVICE_POINT= SAS.symget(''service_point'').strip()';\n\t\tput ' ';\n\t\tput 'if SHOW_ROWS == ''All rows'':';\n\t\tput '    SHOW_ROWS= ''ALL''';\n\t\tput 'if SHOW_ROWS == ''Top rows'':';\n\t\tput '    SHOW_ROWS= ''TOP''';\n\t\tput 'if SHOW_ROWS == ''Bottom rows'':';\n\t\tput '    SHOW_ROWS= ''BOTTOM''';\n\t\tput ' ';\n\t\tput '# Define the URL of the REST API';\n\t\tput 'url= f''http://{SERVICE_URL}/{SERVICE_POINT}/getlog-mas''';\n\t\tput '# Define the JSON payload to send';\n\t\tput 'payload = {';\n\t\tput '    ''show_rows'': SHOW_ROWS,';\n\t\tput '    ''num_rows'': NUM_ROWS';\n\t\tput '}';\n\t\tput ' ';\n\t\tput '# Send the POST request';\n\t\tput 'response= requests.post(url, json=payload, verify=False)';\n\t\tput ' ';\n\t\tput 'SAS.symput(''msg'', '''')';\n\t\tput 'if response.status_code > 200 and response.status_code < 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 500:';\n\t\tput '    msg= f''Error calling url: {url} \\n''';\n\t\tput '    msg+= response.text';\n        put '    SAS.symput(''msg'', msg)';\n\t\tput 'elif response.status_code == 200:';\n\t\tput '    # First row is the header';\n\t\tput '    df= pd.DataFrame(response.json()[''log''][1:], columns=[response.json()[''log''][0]])';\n\t\tput '    ns= response.json()[''ns'']';\n\t\tput '    pod= response.json()[''pod_name'']';\n\t\tput '    pod= pod.replace(''-'', ''_'')';\n\t\tput '    SAS.df2sd(df, f''work.{pod[:32]}'')';\n\trun;\n\t\n\tproc python infile= py;\n\trun;\n\n    /* output result */\t\n\tdata _null_;\n\t    file print; \n\t\t%if %length(&MSG) > 0 %then %do;\n\t\t\tput \"%BQUOTE(&MSG)\";\n\t\t%end;\n\t\tcall symput('msg', '');\n\trun;\n%mend getlogmas;\n\n\n%macro get_service_url();\n\t/* if not using the default url for pull-scr you can set it via macro \"PULL_SCR_URL\" */\n\t%if %symexist(PULL_SCR_URL) = 1 %then %do;\n\t\t%let _service_url= &PULL_SCR_URL;\n\t%end;\n%mend get_service_url;\n%get_service_url()\n\n/* depending on the setting of UI paramater _modus we are calling the appropriate action */\n%if &_modus = Pull image %then %do;\n\t%pullscr();\n%end;\n%if &_modus = Restart pod %then %do;\n\t%restartscr();\n%end;\n%if &_modus = Delete deployment %then %do;\n\t%deletescr();\n%end;\n%if &_modus = Get list of pods in namespace %then %do;\n\t%listscr();\n%end;\n%if &_modus = Get log %then %do;\n\t%getlogscr();\n%end;\n%if &_modus = Get MAS log %then %do;\n\t%getlogmas();\n%end;\n\n/* --------------------------------------------------------------------------- */\n/* clean up macros used in this step                                           */\n/* --------------------------------------------------------------------------- */\n%sysmacdelete pullscr; \n%sysmacdelete restartscr;\n%sysmacdelete deletescr;\n%sysmacdelete listscr;\n%sysmacdelete getlogscr;\n\n"}}